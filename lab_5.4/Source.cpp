#include <iostream>
#include <cmath>
#include <iomanip>
using namespace std;double P0(const int K, const int N) {	double P = 1;	for (int i = K; i <= N; i++) {		P *= (pow(sin(i * 1.), 2) + pow(cos(1. / i), 2))  / (i * i);	}	return P;}double P1(const int K, const int N, const int i) {	if (i > N)		return 1;	else		return ((pow(sin(i * 1.), 2) + pow(cos(1. / i), 2)) / (i * i)) * P1(K, N, i + 1);}double P2(const int K, const int N, const int i) {	if (i < K)		return 1;	else		return ((pow(sin(i * 1.), 2) + pow(cos(1. / i), 2)) / (i * i)) * P2(K, N, i - 1);}double P3(const int K, const int N, const int i, double t ) {	t = t * (pow(sin(i * 1.), 2) + pow(cos(1. / i), 2)) / (i * i);	if (i >= N)		return t;	else		return P3(K, N, i + 1, t);}double P4(const int K, const int N, const int i, double t) {	t = t * (pow(sin(i * 1.), 2) + pow(cos(1. / i), 2)) / (i * i);	if (i <= K)		return t;	else		return P4(K, N, i - 1, t);}int main() {	int K = 1;	int N = 15;	cout <<  left <<"(iter) P0:        " << P0(K, N) << endl;	cout <<  left << "(rec up ++) P1:   " << P1(K, N, K) << endl;	cout <<  left << "(rec up --) P2:   " << P2(K, N, N) << endl;	cout <<  left << "(rec down ++) P3: " << P3(K, N, K, 1) << endl;	cout <<  left << "(rec down --) P4: " << P4(K, N, N, 1) << endl;	return 0;}